// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.19.1
// source: finance/finance.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";

export const protobufPackage = "finance";

export interface FinanceModel {
  id: string;
  businessId: string;
  title: string;
  type: string;
  productName: string;
  amount: number;
  notes: string;
}

export interface CreateFinanceRequest {
  businessId: string;
  title: string;
  type: string;
  productName: string;
  amount: number;
  notes: string;
}

export interface CreateFinanceResponse {
  message: string;
}

export interface ListFinanceRequest {
  businessId: string;
}

export interface ListFinanceResponse {
  finance: FinanceModel[];
}

export interface GetFinanceRequest {
  id: string;
}

export interface GetFinanceResponse {
  finance?: FinanceModel | undefined;
}

export interface UpdateFinanceRequest {
  id: string;
  businessId: string;
  title: string;
  type: string;
  productName: string;
  amount: number;
  notes: string;
}

export interface UpdateFinanceResponse {
  message: string;
}

export interface DeleteFinanceRequest {
  id: string;
}

export interface DeleteFinanceResponse {
  message: string;
}

function createBaseFinanceModel(): FinanceModel {
  return { id: "", businessId: "", title: "", type: "", productName: "", amount: 0, notes: "" };
}

export const FinanceModel: MessageFns<FinanceModel> = {
  encode(message: FinanceModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.businessId !== "") {
      writer.uint32(18).string(message.businessId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.productName !== "") {
      writer.uint32(42).string(message.productName);
    }
    if (message.amount !== 0) {
      writer.uint32(49).double(message.amount);
    }
    if (message.notes !== "") {
      writer.uint32(58).string(message.notes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinanceModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinanceModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinanceModel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
    };
  },

  toJSON(message: FinanceModel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinanceModel>, I>>(base?: I): FinanceModel {
    return FinanceModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinanceModel>, I>>(object: I): FinanceModel {
    const message = createBaseFinanceModel();
    message.id = object.id ?? "";
    message.businessId = object.businessId ?? "";
    message.title = object.title ?? "";
    message.type = object.type ?? "";
    message.productName = object.productName ?? "";
    message.amount = object.amount ?? 0;
    message.notes = object.notes ?? "";
    return message;
  },
};

function createBaseCreateFinanceRequest(): CreateFinanceRequest {
  return { businessId: "", title: "", type: "", productName: "", amount: 0, notes: "" };
}

export const CreateFinanceRequest: MessageFns<CreateFinanceRequest> = {
  encode(message: CreateFinanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessId !== "") {
      writer.uint32(10).string(message.businessId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.productName !== "") {
      writer.uint32(34).string(message.productName);
    }
    if (message.amount !== 0) {
      writer.uint32(41).double(message.amount);
    }
    if (message.notes !== "") {
      writer.uint32(50).string(message.notes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFinanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFinanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFinanceRequest {
    return {
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
    };
  },

  toJSON(message: CreateFinanceRequest): unknown {
    const obj: any = {};
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateFinanceRequest>, I>>(base?: I): CreateFinanceRequest {
    return CreateFinanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateFinanceRequest>, I>>(object: I): CreateFinanceRequest {
    const message = createBaseCreateFinanceRequest();
    message.businessId = object.businessId ?? "";
    message.title = object.title ?? "";
    message.type = object.type ?? "";
    message.productName = object.productName ?? "";
    message.amount = object.amount ?? 0;
    message.notes = object.notes ?? "";
    return message;
  },
};

function createBaseCreateFinanceResponse(): CreateFinanceResponse {
  return { message: "" };
}

export const CreateFinanceResponse: MessageFns<CreateFinanceResponse> = {
  encode(message: CreateFinanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFinanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFinanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFinanceResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: CreateFinanceResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateFinanceResponse>, I>>(base?: I): CreateFinanceResponse {
    return CreateFinanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateFinanceResponse>, I>>(object: I): CreateFinanceResponse {
    const message = createBaseCreateFinanceResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseListFinanceRequest(): ListFinanceRequest {
  return { businessId: "" };
}

export const ListFinanceRequest: MessageFns<ListFinanceRequest> = {
  encode(message: ListFinanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessId !== "") {
      writer.uint32(10).string(message.businessId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFinanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFinanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFinanceRequest {
    return { businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "" };
  },

  toJSON(message: ListFinanceRequest): unknown {
    const obj: any = {};
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFinanceRequest>, I>>(base?: I): ListFinanceRequest {
    return ListFinanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFinanceRequest>, I>>(object: I): ListFinanceRequest {
    const message = createBaseListFinanceRequest();
    message.businessId = object.businessId ?? "";
    return message;
  },
};

function createBaseListFinanceResponse(): ListFinanceResponse {
  return { finance: [] };
}

export const ListFinanceResponse: MessageFns<ListFinanceResponse> = {
  encode(message: ListFinanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.finance) {
      FinanceModel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFinanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFinanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finance.push(FinanceModel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFinanceResponse {
    return {
      finance: globalThis.Array.isArray(object?.finance)
        ? object.finance.map((e: any) => FinanceModel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListFinanceResponse): unknown {
    const obj: any = {};
    if (message.finance?.length) {
      obj.finance = message.finance.map((e) => FinanceModel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFinanceResponse>, I>>(base?: I): ListFinanceResponse {
    return ListFinanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFinanceResponse>, I>>(object: I): ListFinanceResponse {
    const message = createBaseListFinanceResponse();
    message.finance = object.finance?.map((e) => FinanceModel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetFinanceRequest(): GetFinanceRequest {
  return { id: "" };
}

export const GetFinanceRequest: MessageFns<GetFinanceRequest> = {
  encode(message: GetFinanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFinanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFinanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFinanceRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetFinanceRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFinanceRequest>, I>>(base?: I): GetFinanceRequest {
    return GetFinanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFinanceRequest>, I>>(object: I): GetFinanceRequest {
    const message = createBaseGetFinanceRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetFinanceResponse(): GetFinanceResponse {
  return { finance: undefined };
}

export const GetFinanceResponse: MessageFns<GetFinanceResponse> = {
  encode(message: GetFinanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finance !== undefined) {
      FinanceModel.encode(message.finance, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFinanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFinanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finance = FinanceModel.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFinanceResponse {
    return { finance: isSet(object.finance) ? FinanceModel.fromJSON(object.finance) : undefined };
  },

  toJSON(message: GetFinanceResponse): unknown {
    const obj: any = {};
    if (message.finance !== undefined) {
      obj.finance = FinanceModel.toJSON(message.finance);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFinanceResponse>, I>>(base?: I): GetFinanceResponse {
    return GetFinanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFinanceResponse>, I>>(object: I): GetFinanceResponse {
    const message = createBaseGetFinanceResponse();
    message.finance = (object.finance !== undefined && object.finance !== null)
      ? FinanceModel.fromPartial(object.finance)
      : undefined;
    return message;
  },
};

function createBaseUpdateFinanceRequest(): UpdateFinanceRequest {
  return { id: "", businessId: "", title: "", type: "", productName: "", amount: 0, notes: "" };
}

export const UpdateFinanceRequest: MessageFns<UpdateFinanceRequest> = {
  encode(message: UpdateFinanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.businessId !== "") {
      writer.uint32(18).string(message.businessId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.productName !== "") {
      writer.uint32(42).string(message.productName);
    }
    if (message.amount !== 0) {
      writer.uint32(49).double(message.amount);
    }
    if (message.notes !== "") {
      writer.uint32(58).string(message.notes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFinanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFinanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFinanceRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
    };
  },

  toJSON(message: UpdateFinanceRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateFinanceRequest>, I>>(base?: I): UpdateFinanceRequest {
    return UpdateFinanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateFinanceRequest>, I>>(object: I): UpdateFinanceRequest {
    const message = createBaseUpdateFinanceRequest();
    message.id = object.id ?? "";
    message.businessId = object.businessId ?? "";
    message.title = object.title ?? "";
    message.type = object.type ?? "";
    message.productName = object.productName ?? "";
    message.amount = object.amount ?? 0;
    message.notes = object.notes ?? "";
    return message;
  },
};

function createBaseUpdateFinanceResponse(): UpdateFinanceResponse {
  return { message: "" };
}

export const UpdateFinanceResponse: MessageFns<UpdateFinanceResponse> = {
  encode(message: UpdateFinanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFinanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFinanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFinanceResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UpdateFinanceResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateFinanceResponse>, I>>(base?: I): UpdateFinanceResponse {
    return UpdateFinanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateFinanceResponse>, I>>(object: I): UpdateFinanceResponse {
    const message = createBaseUpdateFinanceResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseDeleteFinanceRequest(): DeleteFinanceRequest {
  return { id: "" };
}

export const DeleteFinanceRequest: MessageFns<DeleteFinanceRequest> = {
  encode(message: DeleteFinanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFinanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFinanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFinanceRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteFinanceRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteFinanceRequest>, I>>(base?: I): DeleteFinanceRequest {
    return DeleteFinanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteFinanceRequest>, I>>(object: I): DeleteFinanceRequest {
    const message = createBaseDeleteFinanceRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteFinanceResponse(): DeleteFinanceResponse {
  return { message: "" };
}

export const DeleteFinanceResponse: MessageFns<DeleteFinanceResponse> = {
  encode(message: DeleteFinanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFinanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFinanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFinanceResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: DeleteFinanceResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteFinanceResponse>, I>>(base?: I): DeleteFinanceResponse {
    return DeleteFinanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteFinanceResponse>, I>>(object: I): DeleteFinanceResponse {
    const message = createBaseDeleteFinanceResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type FinanceRoutesServiceService = typeof FinanceRoutesServiceService;
export const FinanceRoutesServiceService = {
  createFinance: {
    path: "/finance.FinanceRoutesService/CreateFinance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateFinanceRequest) => Buffer.from(CreateFinanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateFinanceRequest.decode(value),
    responseSerialize: (value: CreateFinanceResponse) => Buffer.from(CreateFinanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateFinanceResponse.decode(value),
  },
  listFinance: {
    path: "/finance.FinanceRoutesService/ListFinance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListFinanceRequest) => Buffer.from(ListFinanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListFinanceRequest.decode(value),
    responseSerialize: (value: ListFinanceResponse) => Buffer.from(ListFinanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListFinanceResponse.decode(value),
  },
  getFinance: {
    path: "/finance.FinanceRoutesService/GetFinance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFinanceRequest) => Buffer.from(GetFinanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFinanceRequest.decode(value),
    responseSerialize: (value: GetFinanceResponse) => Buffer.from(GetFinanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFinanceResponse.decode(value),
  },
  updateFinance: {
    path: "/finance.FinanceRoutesService/UpdateFinance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateFinanceRequest) => Buffer.from(UpdateFinanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateFinanceRequest.decode(value),
    responseSerialize: (value: UpdateFinanceResponse) => Buffer.from(UpdateFinanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateFinanceResponse.decode(value),
  },
  deleteFinance: {
    path: "/finance.FinanceRoutesService/DeleteFinance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteFinanceRequest) => Buffer.from(DeleteFinanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteFinanceRequest.decode(value),
    responseSerialize: (value: DeleteFinanceResponse) => Buffer.from(DeleteFinanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteFinanceResponse.decode(value),
  },
} as const;

export interface FinanceRoutesServiceServer extends UntypedServiceImplementation {
  createFinance: handleUnaryCall<CreateFinanceRequest, CreateFinanceResponse>;
  listFinance: handleUnaryCall<ListFinanceRequest, ListFinanceResponse>;
  getFinance: handleUnaryCall<GetFinanceRequest, GetFinanceResponse>;
  updateFinance: handleUnaryCall<UpdateFinanceRequest, UpdateFinanceResponse>;
  deleteFinance: handleUnaryCall<DeleteFinanceRequest, DeleteFinanceResponse>;
}

export interface FinanceRoutesServiceClient extends Client {
  createFinance(
    request: CreateFinanceRequest,
    callback: (error: ServiceError | null, response: CreateFinanceResponse) => void,
  ): ClientUnaryCall;
  createFinance(
    request: CreateFinanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateFinanceResponse) => void,
  ): ClientUnaryCall;
  createFinance(
    request: CreateFinanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateFinanceResponse) => void,
  ): ClientUnaryCall;
  listFinance(
    request: ListFinanceRequest,
    callback: (error: ServiceError | null, response: ListFinanceResponse) => void,
  ): ClientUnaryCall;
  listFinance(
    request: ListFinanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListFinanceResponse) => void,
  ): ClientUnaryCall;
  listFinance(
    request: ListFinanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListFinanceResponse) => void,
  ): ClientUnaryCall;
  getFinance(
    request: GetFinanceRequest,
    callback: (error: ServiceError | null, response: GetFinanceResponse) => void,
  ): ClientUnaryCall;
  getFinance(
    request: GetFinanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFinanceResponse) => void,
  ): ClientUnaryCall;
  getFinance(
    request: GetFinanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFinanceResponse) => void,
  ): ClientUnaryCall;
  updateFinance(
    request: UpdateFinanceRequest,
    callback: (error: ServiceError | null, response: UpdateFinanceResponse) => void,
  ): ClientUnaryCall;
  updateFinance(
    request: UpdateFinanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateFinanceResponse) => void,
  ): ClientUnaryCall;
  updateFinance(
    request: UpdateFinanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateFinanceResponse) => void,
  ): ClientUnaryCall;
  deleteFinance(
    request: DeleteFinanceRequest,
    callback: (error: ServiceError | null, response: DeleteFinanceResponse) => void,
  ): ClientUnaryCall;
  deleteFinance(
    request: DeleteFinanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteFinanceResponse) => void,
  ): ClientUnaryCall;
  deleteFinance(
    request: DeleteFinanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteFinanceResponse) => void,
  ): ClientUnaryCall;
}

export const FinanceRoutesServiceClient = makeGenericClientConstructor(
  FinanceRoutesServiceService,
  "finance.FinanceRoutesService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FinanceRoutesServiceClient;
  service: typeof FinanceRoutesServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
