// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.19.1
// source: business/business.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import { FinanceModel } from "../finance/finance";

export const protobufPackage = "business";

export interface CreateBusinessRequest {
  name: string;
  description: string;
}

export interface CreateBusinessResponse {
  message: string;
}

export interface UpdateBusinessRequest {
  id: string;
  name: string;
  description: string;
}

export interface UpdateBusinessResponse {
  message: string;
}

export interface DeleteBusinessRequest {
  id: string;
}

export interface DeleteBusinessResponse {
  message: string;
}

export interface BusinessModel {
  id: string;
  name: string;
  description: string;
  userId: string;
  createdAt: string;
  updatedAt: string;
  finance: FinanceModel[];
}

export interface GetBusinessRequest {
  id: string;
}

export interface GetBusinessResponse {
  business?: BusinessModel | undefined;
}

export interface ListBusinessRequest {
  userId: string;
}

export interface ListBusinessResponse {
  business: BusinessModel[];
}

function createBaseCreateBusinessRequest(): CreateBusinessRequest {
  return { name: "", description: "" };
}

export const CreateBusinessRequest: MessageFns<CreateBusinessRequest> = {
  encode(message: CreateBusinessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBusinessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBusinessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBusinessRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateBusinessRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBusinessRequest>, I>>(base?: I): CreateBusinessRequest {
    return CreateBusinessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBusinessRequest>, I>>(object: I): CreateBusinessRequest {
    const message = createBaseCreateBusinessRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCreateBusinessResponse(): CreateBusinessResponse {
  return { message: "" };
}

export const CreateBusinessResponse: MessageFns<CreateBusinessResponse> = {
  encode(message: CreateBusinessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBusinessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBusinessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBusinessResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: CreateBusinessResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBusinessResponse>, I>>(base?: I): CreateBusinessResponse {
    return CreateBusinessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBusinessResponse>, I>>(object: I): CreateBusinessResponse {
    const message = createBaseCreateBusinessResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUpdateBusinessRequest(): UpdateBusinessRequest {
  return { id: "", name: "", description: "" };
}

export const UpdateBusinessRequest: MessageFns<UpdateBusinessRequest> = {
  encode(message: UpdateBusinessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBusinessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBusinessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBusinessRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UpdateBusinessRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBusinessRequest>, I>>(base?: I): UpdateBusinessRequest {
    return UpdateBusinessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBusinessRequest>, I>>(object: I): UpdateBusinessRequest {
    const message = createBaseUpdateBusinessRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateBusinessResponse(): UpdateBusinessResponse {
  return { message: "" };
}

export const UpdateBusinessResponse: MessageFns<UpdateBusinessResponse> = {
  encode(message: UpdateBusinessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBusinessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBusinessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBusinessResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UpdateBusinessResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBusinessResponse>, I>>(base?: I): UpdateBusinessResponse {
    return UpdateBusinessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBusinessResponse>, I>>(object: I): UpdateBusinessResponse {
    const message = createBaseUpdateBusinessResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseDeleteBusinessRequest(): DeleteBusinessRequest {
  return { id: "" };
}

export const DeleteBusinessRequest: MessageFns<DeleteBusinessRequest> = {
  encode(message: DeleteBusinessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBusinessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBusinessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBusinessRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteBusinessRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBusinessRequest>, I>>(base?: I): DeleteBusinessRequest {
    return DeleteBusinessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBusinessRequest>, I>>(object: I): DeleteBusinessRequest {
    const message = createBaseDeleteBusinessRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteBusinessResponse(): DeleteBusinessResponse {
  return { message: "" };
}

export const DeleteBusinessResponse: MessageFns<DeleteBusinessResponse> = {
  encode(message: DeleteBusinessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBusinessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBusinessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBusinessResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: DeleteBusinessResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBusinessResponse>, I>>(base?: I): DeleteBusinessResponse {
    return DeleteBusinessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBusinessResponse>, I>>(object: I): DeleteBusinessResponse {
    const message = createBaseDeleteBusinessResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseBusinessModel(): BusinessModel {
  return { id: "", name: "", description: "", userId: "", createdAt: "", updatedAt: "", finance: [] };
}

export const BusinessModel: MessageFns<BusinessModel> = {
  encode(message: BusinessModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.userId !== "") {
      writer.uint32(34).string(message.userId);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    for (const v of message.finance) {
      FinanceModel.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.finance.push(FinanceModel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessModel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      finance: globalThis.Array.isArray(object?.finance)
        ? object.finance.map((e: any) => FinanceModel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BusinessModel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.finance?.length) {
      obj.finance = message.finance.map((e) => FinanceModel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessModel>, I>>(base?: I): BusinessModel {
    return BusinessModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessModel>, I>>(object: I): BusinessModel {
    const message = createBaseBusinessModel();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.userId = object.userId ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.finance = object.finance?.map((e) => FinanceModel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetBusinessRequest(): GetBusinessRequest {
  return { id: "" };
}

export const GetBusinessRequest: MessageFns<GetBusinessRequest> = {
  encode(message: GetBusinessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBusinessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBusinessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBusinessRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetBusinessRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBusinessRequest>, I>>(base?: I): GetBusinessRequest {
    return GetBusinessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBusinessRequest>, I>>(object: I): GetBusinessRequest {
    const message = createBaseGetBusinessRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetBusinessResponse(): GetBusinessResponse {
  return { business: undefined };
}

export const GetBusinessResponse: MessageFns<GetBusinessResponse> = {
  encode(message: GetBusinessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.business !== undefined) {
      BusinessModel.encode(message.business, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBusinessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBusinessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.business = BusinessModel.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBusinessResponse {
    return { business: isSet(object.business) ? BusinessModel.fromJSON(object.business) : undefined };
  },

  toJSON(message: GetBusinessResponse): unknown {
    const obj: any = {};
    if (message.business !== undefined) {
      obj.business = BusinessModel.toJSON(message.business);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBusinessResponse>, I>>(base?: I): GetBusinessResponse {
    return GetBusinessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBusinessResponse>, I>>(object: I): GetBusinessResponse {
    const message = createBaseGetBusinessResponse();
    message.business = (object.business !== undefined && object.business !== null)
      ? BusinessModel.fromPartial(object.business)
      : undefined;
    return message;
  },
};

function createBaseListBusinessRequest(): ListBusinessRequest {
  return { userId: "" };
}

export const ListBusinessRequest: MessageFns<ListBusinessRequest> = {
  encode(message: ListBusinessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBusinessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBusinessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBusinessRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ListBusinessRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBusinessRequest>, I>>(base?: I): ListBusinessRequest {
    return ListBusinessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBusinessRequest>, I>>(object: I): ListBusinessRequest {
    const message = createBaseListBusinessRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListBusinessResponse(): ListBusinessResponse {
  return { business: [] };
}

export const ListBusinessResponse: MessageFns<ListBusinessResponse> = {
  encode(message: ListBusinessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.business) {
      BusinessModel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBusinessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBusinessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.business.push(BusinessModel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBusinessResponse {
    return {
      business: globalThis.Array.isArray(object?.business)
        ? object.business.map((e: any) => BusinessModel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListBusinessResponse): unknown {
    const obj: any = {};
    if (message.business?.length) {
      obj.business = message.business.map((e) => BusinessModel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBusinessResponse>, I>>(base?: I): ListBusinessResponse {
    return ListBusinessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBusinessResponse>, I>>(object: I): ListBusinessResponse {
    const message = createBaseListBusinessResponse();
    message.business = object.business?.map((e) => BusinessModel.fromPartial(e)) || [];
    return message;
  },
};

export type BusinessRoutesServiceService = typeof BusinessRoutesServiceService;
export const BusinessRoutesServiceService = {
  createBusiness: {
    path: "/business.BusinessRoutesService/CreateBusiness",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateBusinessRequest) => Buffer.from(CreateBusinessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateBusinessRequest.decode(value),
    responseSerialize: (value: CreateBusinessResponse) => Buffer.from(CreateBusinessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateBusinessResponse.decode(value),
  },
  updateBusiness: {
    path: "/business.BusinessRoutesService/UpdateBusiness",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateBusinessRequest) => Buffer.from(UpdateBusinessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateBusinessRequest.decode(value),
    responseSerialize: (value: UpdateBusinessResponse) => Buffer.from(UpdateBusinessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateBusinessResponse.decode(value),
  },
  deleteBusiness: {
    path: "/business.BusinessRoutesService/DeleteBusiness",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteBusinessRequest) => Buffer.from(DeleteBusinessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteBusinessRequest.decode(value),
    responseSerialize: (value: DeleteBusinessResponse) => Buffer.from(DeleteBusinessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteBusinessResponse.decode(value),
  },
  getBusiness: {
    path: "/business.BusinessRoutesService/GetBusiness",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetBusinessRequest) => Buffer.from(GetBusinessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetBusinessRequest.decode(value),
    responseSerialize: (value: GetBusinessResponse) => Buffer.from(GetBusinessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBusinessResponse.decode(value),
  },
  listBusiness: {
    path: "/business.BusinessRoutesService/ListBusiness",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListBusinessRequest) => Buffer.from(ListBusinessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListBusinessRequest.decode(value),
    responseSerialize: (value: ListBusinessResponse) => Buffer.from(ListBusinessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListBusinessResponse.decode(value),
  },
} as const;

export interface BusinessRoutesServiceServer extends UntypedServiceImplementation {
  createBusiness: handleUnaryCall<CreateBusinessRequest, CreateBusinessResponse>;
  updateBusiness: handleUnaryCall<UpdateBusinessRequest, UpdateBusinessResponse>;
  deleteBusiness: handleUnaryCall<DeleteBusinessRequest, DeleteBusinessResponse>;
  getBusiness: handleUnaryCall<GetBusinessRequest, GetBusinessResponse>;
  listBusiness: handleUnaryCall<ListBusinessRequest, ListBusinessResponse>;
}

export interface BusinessRoutesServiceClient extends Client {
  createBusiness(
    request: CreateBusinessRequest,
    callback: (error: ServiceError | null, response: CreateBusinessResponse) => void,
  ): ClientUnaryCall;
  createBusiness(
    request: CreateBusinessRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateBusinessResponse) => void,
  ): ClientUnaryCall;
  createBusiness(
    request: CreateBusinessRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateBusinessResponse) => void,
  ): ClientUnaryCall;
  updateBusiness(
    request: UpdateBusinessRequest,
    callback: (error: ServiceError | null, response: UpdateBusinessResponse) => void,
  ): ClientUnaryCall;
  updateBusiness(
    request: UpdateBusinessRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateBusinessResponse) => void,
  ): ClientUnaryCall;
  updateBusiness(
    request: UpdateBusinessRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateBusinessResponse) => void,
  ): ClientUnaryCall;
  deleteBusiness(
    request: DeleteBusinessRequest,
    callback: (error: ServiceError | null, response: DeleteBusinessResponse) => void,
  ): ClientUnaryCall;
  deleteBusiness(
    request: DeleteBusinessRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteBusinessResponse) => void,
  ): ClientUnaryCall;
  deleteBusiness(
    request: DeleteBusinessRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteBusinessResponse) => void,
  ): ClientUnaryCall;
  getBusiness(
    request: GetBusinessRequest,
    callback: (error: ServiceError | null, response: GetBusinessResponse) => void,
  ): ClientUnaryCall;
  getBusiness(
    request: GetBusinessRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBusinessResponse) => void,
  ): ClientUnaryCall;
  getBusiness(
    request: GetBusinessRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBusinessResponse) => void,
  ): ClientUnaryCall;
  listBusiness(
    request: ListBusinessRequest,
    callback: (error: ServiceError | null, response: ListBusinessResponse) => void,
  ): ClientUnaryCall;
  listBusiness(
    request: ListBusinessRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListBusinessResponse) => void,
  ): ClientUnaryCall;
  listBusiness(
    request: ListBusinessRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListBusinessResponse) => void,
  ): ClientUnaryCall;
}

export const BusinessRoutesServiceClient = makeGenericClientConstructor(
  BusinessRoutesServiceService,
  "business.BusinessRoutesService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BusinessRoutesServiceClient;
  service: typeof BusinessRoutesServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
